// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: reduced_spatial/reduced_spatial.proto

package reduced_spatial

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReducedSpatialClient is the client API for ReducedSpatial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReducedSpatialClient interface {
	// Receives list of points and may do spatial reduction
	// before saving to Cassandra
	SendPoints(ctx context.Context, in *SendPointsReq, opts ...grpc.CallOption) (*SendPointsReply, error)
}

type reducedSpatialClient struct {
	cc grpc.ClientConnInterface
}

func NewReducedSpatialClient(cc grpc.ClientConnInterface) ReducedSpatialClient {
	return &reducedSpatialClient{cc}
}

func (c *reducedSpatialClient) SendPoints(ctx context.Context, in *SendPointsReq, opts ...grpc.CallOption) (*SendPointsReply, error) {
	out := new(SendPointsReply)
	err := c.cc.Invoke(ctx, "/reduced_spatial.ReducedSpatial/SendPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReducedSpatialServer is the server API for ReducedSpatial service.
// All implementations must embed UnimplementedReducedSpatialServer
// for forward compatibility
type ReducedSpatialServer interface {
	// Receives list of points and may do spatial reduction
	// before saving to Cassandra
	SendPoints(context.Context, *SendPointsReq) (*SendPointsReply, error)
	mustEmbedUnimplementedReducedSpatialServer()
}

// UnimplementedReducedSpatialServer must be embedded to have forward compatible implementations.
type UnimplementedReducedSpatialServer struct {
}

func (UnimplementedReducedSpatialServer) SendPoints(context.Context, *SendPointsReq) (*SendPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPoints not implemented")
}
func (UnimplementedReducedSpatialServer) mustEmbedUnimplementedReducedSpatialServer() {}

// UnsafeReducedSpatialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReducedSpatialServer will
// result in compilation errors.
type UnsafeReducedSpatialServer interface {
	mustEmbedUnimplementedReducedSpatialServer()
}

func RegisterReducedSpatialServer(s grpc.ServiceRegistrar, srv ReducedSpatialServer) {
	s.RegisterService(&ReducedSpatial_ServiceDesc, srv)
}

func _ReducedSpatial_SendPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReducedSpatialServer).SendPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reduced_spatial.ReducedSpatial/SendPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReducedSpatialServer).SendPoints(ctx, req.(*SendPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReducedSpatial_ServiceDesc is the grpc.ServiceDesc for ReducedSpatial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReducedSpatial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reduced_spatial.ReducedSpatial",
	HandlerType: (*ReducedSpatialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPoints",
			Handler:    _ReducedSpatial_SendPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reduced_spatial/reduced_spatial.proto",
}
